<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[（二）nRF52 Blinky FreeRTOS 例程分析]]></title>
      <url>%2F2017%2F02%2F20%2FnRF52%2F2%20nRF52%20Blinky%20FreeRTOS%20%E4%BE%8B%E7%A8%8B%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[除非注明，本站博客均为原创或翻译，转载请务必注明出处并保留原文链接：文章来源于喵兄研发日记 [TOC] 工程简介​ 与上一个例程不同之处在于，本工程中添加有FreeRTOS，犹记得当年用nRF51822时，对第三方的RTOS支持还不是太好。 代码分析​ 直接上图，main函数中的代码如下，主要分三段：设备时钟初始化、LED引脚设置以及创建任务及定时器，最后启动任务调度。 ​ 引脚相关配置、控制逻辑这里不再详述，参考（一）即可，先看设备时钟部分，再看RTOS。 nRF设备时钟模块 ​ 设备始终初始化操作中基本上在对m_clock_cb结构体进行初始化操作，主要有：清除事件的头指针，请求计数置0。其次是使能了高频时钟中断及设置低频时钟的时钟源。先瞅瞅该结构体是啥玩意： ​ 可以看到该结构体模块用来保存初始化状态、高低频时钟开启状态以及高低频时钟的请求计数值；除此之外，每个时钟还有一个事件指针，以链表形式挂载着一系列的待处理事件。事件块的结构如下图所示， 在当前的事件块中，保存着下一个事件的结构体指针以及当前事件的回调处理函数。 ​ 看完介绍好像一头雾水，再看看时钟模块提供的其它API接口（高低频时钟接口类型一样）： ​ 时钟模块对外提供的3个主要函数，先介绍request函数，当有事件需要处理时，调用request函数将会：1. 时钟未启动，将事件添加到队列中，启动时钟，事件将在时钟中断程序中异步执行；2. 时钟已启动，在request函数中直接执行此事件函数。 ​ release函数则在每次调用后减少一次请求数，当请求数为0时，停止时钟，is_running函数则是查询时钟运行状态。 ​ 暂时没看懂这样做有什么用 = = FreeRTOS简单分析​ 既然本例程使用了FreeRTOS，当然得介绍一下，不过此处不做RTOS内部分析，只简单介绍它是怎么跑起来的。先从nRF52的启动文件arm_startup_nrf52.s开始，同STM32一样，在程序正常启动进入main函数之前，先触发硬件复位中断进入了SystemInit函数中。 ​ 简单看了一下系统初始化过程，主要是初始化了系统外设时钟，没看出来跟FreeRTOS有啥牵连。再进入到main函数中瞅瞅，函数内总共调用FreeRTOS做了三件事：创建一个进程、创建并启动一个定时器、启动任务调度器。因此FreeRTOS与硬件时钟相关的交互部分肯定在这其中了。干脆直奔vTaskStartScheduler()函数，该函数主要调用了xPortStartScheduler()函数，这使得vTaskStartScheduler函数在应用层具备通用性，而xPortStartScheduler则具备可移植性，nice! ​ 再看看xPortStartScheduler函数中主要做的事情，设置PendSV中断优先级，启动RTC中断作为FreeRTOS的systick中断，最后启动第一个任务。 ​ 看到这里还是蒙B，PendSV及RTC中断跟FreeRTOS有舍联系？搜一下其中断回调函数可发现玄机：工程中FreeRTOS的SVC系统调用及PendSV可悬挂调用直接宏定义成了对应的硬件中断回调函数！当这两个中断触发时，便会去调用FreeRTOS的系统调用函数去实现任务调度。 ​ ​ 那SVC/PendSV中断怎样才会触发呢？别忘了，还有一个RTC中断函数，FreeRTOS的xPortSysTickHandler函数被宏定义成了RTC1的硬件中断回调函数，RTC1定时器启动后就会定期的触发中断用作精准的RTOS滴答计数以及触发相关的服务中断，接下来看看定时器中断xPortSysTickHandler中的执行内容： ​ 定时器就做了两件事：计数值+1以及触发PendSV中断，使用PendSV的好处是保证其它硬件中断的实时性不会被定时器打断而强制性切换到线程中，否则会触发硬件错误。当没有其它硬件中断时，MCU执行PendSV以切换RTOS的上下文。对于SysTick、SVC、以及PendSV三者之间是如何具体的实现任务的上下文切换，将在以后的RTOS篇中详述。 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[（一）nRF52 Binky 例程分析]]></title>
      <url>%2F2017%2F02%2F18%2FnRF52%2F1%20nRF52%20Blinky%20%E4%BE%8B%E7%A8%8B%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[除非注明，本站博客均为原创或翻译，转载请务必注明出处并保留原文链接：文章来源于喵兄研发日记 [TOC] 工程简介​ Noridc官方提供了多种开发环境下的例程，首先选择评估板的型号，比如我的是pca10040，再选择自己要用的开发环境，此处选择的环境是Keil4，因此本文的例程路径如图所示： ​ ​ 简单说明一下，blinky\ 目录下的blinky.eww为IAR工程，blinky\pca10040\下有两个文件夹blank和s132，一个不包含软设备库，一个包含，在此Demo中任选一个皆可。例如blank下又有众多工程配置，根据自己的开发工具选择即可。 代码分析​ 首先看一下对引脚的定义，评估板上有四个LED灯，分别为引脚17、18、19、20，nRF52引脚不像常用的STM32那样，有端口和引脚号的概念，其素有的引脚都可以独立访问，并灵活的配置映射到某个功能模块上。因此，四个引脚的定义就是这么简单： ​ 接下来看一下主程序，line37行将四个引脚配置为输出，line44依次翻转各个引脚的状态，line45是软件延时，里面死循环执行汇编指令。 ​ 对于引脚的翻转，Nordic的设计还有点意思，可以分析一下。首先明确：OUTSET及OUTCLR寄存器只对写1操作有效，写0被忽视了。 ​ 在line64中，变量gpio_state获取了当前所有输出引脚的位状态（0或1）。在line65中，先对变量gpio_state的所有状态位进行了翻转，因此那些先前复位（灯灭）的位，此时的变量值被设定为1，然后再对leds_mask位处的值进行了&amp;1的运算，其余不相干位都是&amp;0运算，也就是说：除了leds_mask位，其余所有位都为0，对OUTSET寄存器来说，写0没有影响。接着判断leds_mask位，如果该位的实际引脚输出为0（灯灭），变量翻转后为1，&amp;1以后为1，则将该引脚置位（点亮）；如果该位的引脚输出为1（灯本来就是亮的），变量位翻转后为0，&amp;1为0，则灯保持不变。因此本行代码的作用就是：对于leds_mask位，如果灯本来是灭的，将其点亮，状态位0-&gt;1；如果灯本来是亮的，不管它。 ​ 再看line65行，对gpio_state进行了与运算，除了leds_mask位需要计算，其余位运算后都为0，因此要改变的也只有可能是leds_mask位。接下来判断leds_mask位，如果该位的gpio_state值为0（其实是line64之前的状态，灯本来是灭的），则&amp;1运算后，是0，无影响；如果该位的gpio_state值为1（灯本来是亮的），则&amp;1运算后，是1，将该位写1，清除输出。因此本行代码的作用就是：对于leds_mask位，如果灯本来是灭的，不管它；如果灯本来是亮的，将其熄灭，状态位1-&gt;0。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[（〇）nRF52 硬件介绍]]></title>
      <url>%2F2017%2F02%2F17%2FnRF52%2F0%20nRF52%20%E7%A1%AC%E4%BB%B6%E7%AE%80%E4%BB%8B%2F</url>
      <content type="text"><![CDATA[除非注明，本站博客均为原创或翻译，转载请务必注明出处并保留原文链接：文章来源于喵兄研发日记 [TOC] 开箱清单​ nRF52评估板购买于贸泽商城，含税300大洋。里面除了nRF52主板以外，还包含5枚nRF52832芯片以及一片NFC线圈。 ​ 图1. 购买清单合影 硬件资源介绍​ nRF52评估板将主控MCU的所有引脚（编号从P0.00到P0.31）都引了出来，并以排母的形式分布在开发板的两端，旁边的过孔也可以自己焊接成排针，为引脚与模块之间的连线提供了方便，此外，开发板还兼容arduino接口，可谓考虑周详。 ​ 图2.评估板硬件资源标识 ​ 如图所示，板载硬件中自带Jlink调试器（中间最大的白色IC），并引出了两种向外的调试接口，长排的接口为常用的SWD接口，nRF52除了可使用自带Jlink调试器外，也提供了Debug in接口，以支持外部调试器的接入。在供电方面，评估板提供了三种供电方式：纽扣电池供电、USB供电以及外部引脚供电，其中USB供电口可直接插在电脑端，除了供电外还提供了额外的两个功能：一，串口调试功能；二，USB的大容量存储模式，在电脑上呈现一个U盘的状态，将编译生成的固件直接拖入该盘中，即完成固件的更新。最后nRF52还提供了NFC功能，通过下方的NFC接口可插入外部NFC线圈。 ​ 图3. 虚拟串口功能 ​ 图4. USB大容量存储模式 ​ 最后重点介绍本文的主角：nRF52832IC，Nordic最新的一款微控制器产品，型号标识是N52832QFAA，采用QFN48封装，尺寸仅为6x6mm；若采用晶圆级芯片封装（WLCSP），尺寸可做到3.0x3.2mm。 ​ 打开Keil工程选项，可以看到处理器的架构为ARM Cortex-M4，32-bit，最大主频64 MHz，内部闪存为512kB，SRAM也达到了64kB。下面列出一张对比表，比较nRF52832与自家的前一代芯片nRF51822之间的参数差异。 ​ 表1. 芯片参数对比 ​ 从表1中可以看到，新一代的nRF52芯片在上一代nRF51的基础上，性能及功能方面都有了显著的提升。当市面上大多数厂商的BLE依然采用Cortex-M0或51架构时，北欧半导体厂商已经率先采用了ARM Cortex-M4架构内核，在提高内核性能的同时还进一步降低了芯片的整体功耗，其产品的整体表现不可谓不强大。对比上一代产品，nRF52不论是在数据收发过程中，还是在低功耗待机模式中，其整体功耗均得到明显降低，除此之外，nRF52还出现了众多前一代所不具备的新特性，例如NFC功能以及EasyDMA等技术。 上手体验​ 对于新拿到评估板的用户，Nordic官网提供了基础的引导入门，此处测试其中的两个小Demo：Heart rate monitor以及Proximity demo。准备工作分两步：一，点击页面下载链接获得两个Demo的Zip压缩包并分别解压到本地目录中；二，去应用市场下载Nordic的BLE工具箱APP ，名字叫做nRF Toolbox。 ​ 图5. 测试准备工作 心率监视器防丢Demo更多新特性​ 喵兄已将本文版权归属于21IC中国电子网，读者可点击前往查看完整评测。 总结​ 北欧半导体推出的nRF52评估板是一个完整的BLE/NFC开发调试板，板载性能强劲的nRF52832控制器，该MCU集成有ARM Cortex-M4处理器内核，64MHz主频，内置512/256KB的Flash，以及64/32KB SRAM的大容量存储。此外nRF52832的功耗在上一代产品的基础上有了进一步的降低，使得其不仅在传统的计算机外设、医疗娱乐等领域具备优势，在新兴的物联网、智能设备等领域也更具应用前景。感兴趣的读者可购买评估或访问贸泽电子商城了解更多详情。 喵兄已将此篇文章 “（〇）nRF52硬件介绍” 版权归属于21IC中国电子网，读者可点击前往查看完整评测。]]></content>
    </entry>

    
  
  
</search>
